{"version":3,"sources":["components/grid/TableGrid.js","components/bse_stocks/BSEStocks.js","components/sbimf/FundDetails.js","components/sbimf/MFDashboard.js","components/sbimf/MFTabs.js","components/bse/BSEIndices.js","components/bse_etfs/BSE_ETFs.js","components/TabsList.js","App.js","reportWebVitals.js","index.js"],"names":["TableGrid","rowData","colDefs","width","getRowStyle","className","style","height","length","suppressFieldDotNotation","onGridReady","params","api","setRowData","sizeColumnsToFit","columnDefs","BSEStocks","props","setSelectedIndex","e","setState","selectedIndex","target","value","setSelectedRange","selectedRange","setSelectedSign","selectedSign","color","getRangeValue","latestValue","state","loaded","dataArray","differentSigns","differentRanges","differentIndices","field","sortable","resizable","filter","this","encodedIndex","replace","fetch","then","response","json","map","eachIndexData","eachData","ltradert","change_percent","parseFloat","split","forEach","eachIndex","substring","includes","push","sort","da1","da2","localeCompare","catch","err","console","log","filteredArray","error","defaultValue","onChange","event","eachRange","eachSign","Component","FundDetails","getPastDates","today","Date","setDate","getDate","oneWeekBackDate","twoWeekBackDate","setMonth","getMonth","oneMonthBackDate","twoMonthBackDate","threeMonthsBackDate","sixMonthsBackDate","nineMonthsBackDate","setFullYear","getFullYear","oneYearBackDate","getDateDifference","date1","date2","parseInt","data","fund","dates","apiLink","schemeCode","slice","maxSize","schemeName","eachDate","currentNav","nav","toFixed","oldNav","content","colSpan","index","align","MFDashboard","funds","eachFund","toUpperCase","indexOf","mfName","border","borderCollapse","MFTabs","BSEIndices","getOldData","interval","setHours","neededData","getDataForDate","dateValue","requiredData","toString","getCellStyle","col","categories","durations","allIndexChangeData","noOfIndices","eachCategory","eachResponse","apiDataLink","JSON","parse","substr","latestData","dataObject","eachDuration","oldData","oldDataChange","oldDataChangePer","cellStyle","BSE_ETFs","indexCodes","TabsList","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cac5bde0.chunk.js","sourcesContent":["import React from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\n\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\r\n\r\nconst TableGrid = ({rowData, colDefs, width, getRowStyle}) => {\r\n    const onGridReady = params => {\r\n        params.api.setRowData(rowData);\r\n        params.api.sizeColumnsToFit();\r\n    }\r\n    return (\r\n       <div className=\"ag-theme-alpine\" style={{height:  50 + rowData.length * 42, width: width}}>\r\n           <AgGridReact\r\n               suppressFieldDotNotation = {false}\r\n               getRowStyle={getRowStyle}\r\n               onGridReady={onGridReady}\r\n               rowData={rowData}\r\n               columnDefs={colDefs}>\r\n           </AgGridReact>\r\n       </div>\r\n   );\r\n};\r\n\r\nexport default TableGrid;","import React, {Component} from 'react';\r\nimport TableGrid from '../grid/TableGrid';\r\nclass BSEStocks extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            loaded : false,\r\n            dataArray : null,\r\n            selectedSign: null,\r\n            selectedIndex: 'S&P BSE AllCap',\r\n            selectedRange : null,\r\n            differentSigns : [\"All\", \"+ve\", \"-ve\"],\r\n            differentRanges : [\"All\", \"0 - 10\", \"10 - 50\", \"50 - 100\", \"100 - 500\", \"500 - 1000\", \"1000 - 5000\", \"5000 - 10000\", \"> 10000\"],\r\n            differentIndices : null,\r\n            colDefs : [\r\n                { field: 'scripName', sortable : true, resizable: true, filter: \"agTextColumnFilter\" },\r\n                { field: 'prevDayClose', sortable : true },\r\n                { field: 'openValue', sortable : true },\r\n                { field: 'latestValue', sortable : true },\r\n                { field: 'lowValue', sortable : true },\r\n                { field: 'highValue', sortable : true },\r\n                { field: 'changeValue', sortable : true },\r\n                { field: 'changePercent', sortable : true, filter: \"agNumberColumnFilter\" },\r\n                { field: 'sign', filter: \"agTextColumnFilter\"},\r\n                { field: 'range', filter: \"agTextColumnFilter\"}\r\n            ]\r\n        }\r\n    }\r\n\r\n    setSelectedIndex = e => {\r\n        this.setState({selectedIndex : e.target.value});\r\n    }\r\n\r\n    setSelectedRange = e => {\r\n        this.setState({selectedRange : e.target.value});\r\n    }\r\n\r\n    setSelectedSign = e => {\r\n        this.setState({selectedSign : e.target.value});\r\n    }\r\n\r\n    getRowStyle = params => {\r\n        return {color: params[\"data\"][\"changeValue\"]  >= 0 ? \"green\" : \"red\"}\r\n    };\r\n\r\n    getRangeValue = latestValue => {\r\n        let rangeStr = \"\";\r\n        if(latestValue > 0 && latestValue <= 10.0) {\r\n            rangeStr = \"0 - 10\";\r\n        }\r\n        else if(latestValue > 10.0 && latestValue <= 50.0) {\r\n            rangeStr = \"10 - 50\";\r\n        }\r\n        else if(latestValue > 50.0 && latestValue <= 100.0) {\r\n            rangeStr = \"50 - 100\";\r\n        }\r\n        else if(latestValue > 100.0 && latestValue <= 500.0) {\r\n            rangeStr = \"100 - 500\";\r\n        }\r\n        else if(latestValue > 500.0 && latestValue <= 1000.0) {\r\n            rangeStr = \"500 - 1000\";\r\n        }\r\n        else if(latestValue > 1000.0 && latestValue <= 5000.0) {\r\n            rangeStr = \"1000 - 5000\";\r\n        }\r\n        else if(latestValue > 5000.0 && latestValue <= 10000.0) {\r\n            rangeStr = \"5000 - 10000\";\r\n        }\r\n        else if(latestValue > 10000.0) {\r\n            rangeStr = \"> 10000\";\r\n        }\r\n        else {\r\n            rangeStr = \"NONE\";\r\n        }\r\n\r\n        return rangeStr;\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(!this.state.loaded) {\r\n            var encodedIndex = (\"S%26P BSE AllCap\").replace(/ /g, '+');\r\n            var apiLink = \"https://api.bseindia.com/BseIndiaAPI/api/GetMktData/w?ordcol=TT&strType=index&strfilter=\" + encodedIndex;\r\n            fetch(apiLink)\r\n            .then(response => response.json())\r\n            .then(response => response[\"Table\"])\r\n            .then(response => {\r\n                const differentIndices = [];\r\n                let dataArray = response.map(eachIndexData => {\r\n                    let eachData = {};\r\n                    const {ltradert, change_percent} = eachIndexData;\r\n                    \r\n                    eachData[\"latestValue\"] = parseFloat(ltradert);\r\n                    eachData[\"changePercent\"] = parseFloat(change_percent);\r\n                    eachData[\"scripName\"] = eachIndexData[\"scripname\"];\r\n                    eachData[\"openValue\"] = eachIndexData[\"openrate\"];\r\n                    eachData[\"lowValue\"] = eachIndexData[\"lowrate\"];\r\n                    eachData[\"highValue\"] = eachIndexData[\"highrate\"];\r\n                    eachData[\"prevDayClose\"] = eachIndexData[\"prevdayclose\"];\r\n                    eachData[\"changeValue\"] = eachIndexData[\"change_val\"];\r\n                    eachData[\"index_code\"] = eachIndexData[\"index_code\"];\r\n                    eachData[\"sign\"] = eachIndexData[\"change_val\"] >= 0.0 ? \"+ve\" : \"-ve\";\r\n                    eachData[\"range\"] = this.getRangeValue(parseFloat(ltradert));\r\n\r\n                    const indices = eachIndexData[\"index_code\"].split(\",\");\r\n                    indices.forEach(eachIndex => {\r\n                        eachIndex = eachIndex.substring(1, eachIndex.length - 1);\r\n                        if(!differentIndices.includes(eachIndex)) {\r\n                            differentIndices.push(eachIndex);\r\n                        }\r\n                    });\r\n\r\n                    return eachData;\r\n                });\r\n\r\n                dataArray = dataArray.sort((da1, da2) => da1[\"scripName\"].localeCompare(da2[\"scripName\"]));\r\n\r\n                this.setState({loaded : true, differentIndices: differentIndices, dataArray: dataArray});\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n                //this.setState({data: null, error: true});\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let filteredArray;\r\n        if(this.state.selectedIndex === 'S&P BSE AllCap') {\r\n            filteredArray = this.state.dataArray;\r\n        }\r\n        else { \r\n            filteredArray = this.state.dataArray\r\n            .filter(eachData => eachData[\"index_code\"].includes(this.state.selectedIndex));\r\n        }\r\n\r\n        if(this.state.selectedSign && this.state.selectedSign !== \"All\") {\r\n            filteredArray = filteredArray\r\n            .filter(eachData => eachData[\"sign\"] === this.state.selectedSign);\r\n        }\r\n        if(this.state.selectedRange && this.state.selectedRange !== \"All\") {\r\n            filteredArray = filteredArray\r\n            .filter(eachData => eachData[\"range\"] === this.state.selectedRange);\r\n        }\r\n\r\n        return this.state.error ? <div>Error...!!!</div> :\r\n            !this.state.loaded ?<div>Loading ...!!!</div> : \r\n            (\r\n                <div>\r\n                    <div>Index : <select defaultValue={this.state.selectedIndex} onChange={(event) => this.setSelectedIndex(event)}>\r\n                    {\r\n                        this.state.differentIndices.map(eachIndex => <option key = {eachIndex}>{eachIndex}</option>)\r\n                    }\r\n                    </select>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n                    Range : <select defaultValue={this.state.selectedRange} onChange={(event) => this.setSelectedRange(event)}>\r\n                    {\r\n                        this.state.differentRanges.map(eachRange => <option key = {eachRange}>{eachRange}</option>)\r\n                    }\r\n                    </select>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n                    Sign : <select defaultValue={this.state.selectedSign} onChange={(event) => this.setSelectedSign(event)}>\r\n                    {\r\n                        this.state.differentSigns.map(eachSign => <option key = {eachSign}>{eachSign}</option>)\r\n                    }\r\n                    </select>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n                    Stock Count : {filteredArray.length}</div>\r\n                    <TableGrid colDefs = {this.state.colDefs} rowData = {filteredArray} \r\n                        width = {1300} getRowStyle = {this.getRowStyle}/>\r\n                </div>\r\n            );\r\n    }\r\n}\r\n \r\nexport default BSEStocks;","import React, {Component} from \"react\";\r\n\r\nclass FundDetails extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: null\r\n        }\r\n    }\r\n\r\n    getPastDates = () => {\r\n        var today = new Date();\r\n        today.setDate(today.getDate() - 7);\r\n        var oneWeekBackDate = today;\r\n\r\n        today = new Date();\r\n        today.setDate(today.getDate() - 15);\r\n        var twoWeekBackDate = today;\r\n\r\n        today = new Date();\r\n        today.setMonth(today.getMonth() - 1);\r\n        var oneMonthBackDate = today;\r\n\r\n        today = new Date();\r\n        today.setMonth(today.getMonth() - 2);\r\n        var twoMonthBackDate = today;\r\n\r\n        today = new Date();\r\n        today.setMonth(today.getMonth() - 3);\r\n        var threeMonthsBackDate = today;\r\n\r\n        today = new Date();\r\n        today.setMonth(today.getMonth() - 6);\r\n        var sixMonthsBackDate = today;\r\n\r\n        today = new Date();\r\n        today.setMonth(today.getMonth() - 9);\r\n        var nineMonthsBackDate = today;\r\n\r\n        today = new Date();\r\n        today.setFullYear(today.getFullYear() - 1);\r\n        var oneYearBackDate = today;\r\n\r\n        today = new Date();\r\n        return [\r\n            1,\r\n            this.getDateDifference(today, oneWeekBackDate),\r\n            this.getDateDifference(today, twoWeekBackDate),\r\n            this.getDateDifference(today, oneMonthBackDate),\r\n            this.getDateDifference(today, twoMonthBackDate),\r\n            this.getDateDifference(today, threeMonthsBackDate),\r\n            this.getDateDifference(today, sixMonthsBackDate),\r\n            this.getDateDifference(today, nineMonthsBackDate),\r\n            this.getDateDifference(today, oneYearBackDate),\r\n        ]\r\n    }\r\n\r\n    getDateDifference = (date1, date2) =>\r\n    {\r\n        return parseInt((date1 - date2) / (1000 * 60 * 60 * 24), 10);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const fund = this.props.fund;\r\n        const dates = this.getPastDates();\r\n        const apiLink = \"https://api.mfapi.in/mf/\" + fund.schemeCode;\r\n        fetch(apiLink)\r\n        .then(response => response.json())\r\n        .then(response => response.data.slice(0, 365))\r\n        .then(response => {\r\n            var maxSize = response.length - 1;\r\n            return [\r\n                fund.schemeCode,\r\n                fund.schemeName,\r\n                ...(dates.map(eachDate =>\r\n                    {\r\n                        var currentNav = parseFloat(response[0].nav).toFixed(5);\r\n                        var oldNav = parseFloat( eachDate > maxSize ? response[maxSize].nav : response[eachDate].nav).toFixed(5);\r\n                        return (((currentNav - oldNav) / oldNav) * 100000).toFixed(0);\r\n                    }\r\n                ))\r\n            ];\r\n        })\r\n        .then(response => this.setState({data: response}))\r\n        .catch(err => console.log(err));\r\n    }\r\n    render() {\r\n        let content = (<tr><td colSpan={11}>Loading...!!!</td></tr>);\r\n\r\n        if(this.state.data && this.state.data.length > 0)\r\n        {\r\n            content = this.state.data.map((eachData, index) => \r\n                <td align={index === 1 ? \"left\" : \"center\"}>\r\n                    {index > 1 ? <font color = {eachData < 0 ? \"red\" : \"green\"}>{eachData}</font> : index === 1 ?<nobr>{eachData}</nobr> : eachData}\r\n                </td> \r\n            );\r\n            content = <tr key={this.state.data[1]}>{content}</tr>\r\n        }\r\n        return (content);\r\n    }\r\n}\r\n \r\nexport default FundDetails;","import React, {Component} from \"react\";\r\nimport FundDetails from \"./FundDetails\";\r\n\r\nclass MFDashboard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            funds: []\r\n        }\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        const apiLink = \"https://api.mfapi.in/mf\";\r\n        fetch(apiLink)\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            response = response.filter(eachFund => eachFund.schemeName.toUpperCase().indexOf(this.props.mfName) === 0)\r\n            .filter(eachFund => eachFund.schemeName.toUpperCase().indexOf(\"GROWTH\") > -1)\r\n            .filter(eachFund => eachFund.schemeName.toUpperCase().indexOf(\"DIRECT\") > -1)\r\n            .filter(eachFund => eachFund.schemeName.toUpperCase().indexOf(\"DEBT\") === -1)\r\n            .filter(eachFund => eachFund.schemeName.toUpperCase().indexOf(\"MATURITY\") === -1)\r\n            .filter(eachFund => eachFund.schemeName.toUpperCase().indexOf(\"SERIES\") === -1);\r\n\r\n            this.setState({funds : response})\r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n\r\n    render() { \r\n        let content = \"Loading...!!!\";\r\n        if((this.state.funds.length) > 0) \r\n        {\r\n            content = this.state.funds.map(eachFund => <FundDetails key={eachFund.schemeName} fund={eachFund}/>);\r\n            content = <table border=\"1\" style={{borderCollapse:'collapse'}}>\r\n                <thead>\r\n                    <tr>\r\n                        <th><nobr>Scheme Code</nobr></th>\r\n                        <th><nobr>Scheme Name</nobr></th>\r\n                        <th>1D</th>\r\n                        <th>7D</th>\r\n                        <th>15D</th>\r\n                        <th>1M</th>\r\n                        <th>2M</th>\r\n                        <th>3M</th>\r\n                        <th>6M</th>\r\n                        <th>9M</th>\r\n                        <th>1Y</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {content}\r\n                </tbody>\r\n            </table>\r\n        }\r\n        return <div>\r\n            {content}\r\n        </div>;\r\n    }\r\n}\r\n \r\nexport default MFDashboard;","\r\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\r\nimport 'react-tabs/style/react-tabs.css';\r\nimport MFDashboard from './MFDashboard';\r\n\r\nconst MFTabs = () => (\r\n  <Tabs>\r\n    <TabList>\r\n      <Tab>SBI</Tab>\r\n      <Tab>HDFC</Tab>\r\n      <Tab>ICICI</Tab>\r\n      <Tab>KOTAK</Tab>\r\n      <Tab>AXIS</Tab>\r\n      <Tab>TATA</Tab>\r\n      <Tab>MAHINDRA</Tab>\r\n      <Tab>NIPPON</Tab>\r\n    </TabList>\r\n\r\n    <TabPanel>\r\n        <MFDashboard mfName=\"SBI\"/>\r\n    </TabPanel>\r\n    <TabPanel>\r\n      <MFDashboard mfName=\"HDFC\"/>\r\n    </TabPanel>\r\n    <TabPanel>\r\n      <MFDashboard mfName=\"ICICI\"/>\r\n    </TabPanel>\r\n    <TabPanel>\r\n      <MFDashboard mfName=\"KOTAK\"/>\r\n    </TabPanel>\r\n    <TabPanel>\r\n      <MFDashboard mfName=\"AXIS\"/>\r\n    </TabPanel>\r\n    <TabPanel>\r\n      <MFDashboard mfName=\"TATA\"/>\r\n    </TabPanel>\r\n    <TabPanel>\r\n      <MFDashboard mfName=\"MAHINDRA\"/>\r\n    </TabPanel>\r\n    <TabPanel>\r\n      <MFDashboard mfName=\"NIPPON\"/>\r\n    </TabPanel>\r\n  </Tabs>\r\n);\r\n\r\nexport default MFTabs;","import React, {Component} from 'react';\r\nimport TableGrid from '../grid/TableGrid';\r\nclass BSEIndices extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            categories : [1, 2, 3, 4, 5, 6],\r\n            durations: ['1D', '7D', '15D', '1M', '3M', '6M', '9M', '1Y'],\r\n            colDefs: null,\r\n            data : null, \r\n            loaded : false\r\n        }\r\n    }\r\n\r\n    getOldData = (data, interval) => {\r\n        var today = new Date();\r\n        today.setHours(0, 0, 0, 0);\r\n        switch(interval) {\r\n            case '1D' : today.setDate(today.getDate() - 1);\r\n                        break;\r\n            case '7D' : today.setDate(today.getDate() - 7);\r\n                        break;\r\n            case '15D' : today.setDate(today.getDate() - 15);\r\n                        break;\r\n            case '1M' : today.setMonth(today.getMonth() - 1);\r\n                        break;\r\n            case '3M' : today.setMonth(today.getMonth() - 3);\r\n                        break;\r\n            case '6M' : today.setMonth(today.getMonth() - 6);\r\n                        break;\r\n            case '9M' : today.setMonth(today.getMonth() - 9);\r\n                        break;\r\n            case '1Y' : today.setFullYear(today.getFullYear() - 1);\r\n                        break;\r\n            default   : break;\r\n        }\r\n\r\n        let neededData = this.getDataForDate(today, data, interval);\r\n        if(neededData && neededData.length > 0) {\r\n            return neededData[0][\"value\"];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    getDataForDate = (dateValue, data, interval) => {\r\n        let requiredData = data.filter(eachData => dateValue.toString().includes(eachData[\"date\"]));\r\n        if(!requiredData || requiredData.length === 0) {\r\n            if(interval === '1D'){\r\n                dateValue.setDate(dateValue.getDate() - 1);\r\n            }\r\n            else {\r\n                dateValue.setDate(dateValue.getDate() + 1);\r\n            }\r\n            requiredData = this.getDataForDate(dateValue, data, interval);\r\n        }\r\n        return requiredData;\r\n    }\r\n    \r\n    getCellStyle = params => {\r\n        var data = params[\"data\"];\r\n        var col = params[\"colDef\"][\"field\"].substring(0, 2);\r\n        return {color: data[\"latestValue\"] >= data[col] ? \"green\" : \"red\"};\r\n    };\r\n\r\n    componentDidMount() {\r\n        let allIndexChangeData = [];\r\n        let eachIndex;\r\n        let noOfIndices = 0;\r\n        this.state.categories.forEach(eachCategory => {\r\n            var apiLink = \"https://api.bseindia.com/BseIndiaAPI/api/MktCapBoard/w?cat=\" + eachCategory + \"&type=2\";\r\n            fetch(apiLink)\r\n            .then(response => response.json())\r\n            .then(response => response[\"RealTime\"])\r\n            .then(response => {\r\n                noOfIndices += response.length;\r\n                response.forEach(eachResponse => {\r\n                    var apiDataLink = \"https://api.bseindia.com/BseIndiaAPI/api/SensexGraphData/w?index=\" + eachResponse[\"ScripFlagCode\"] + \"&flag=12M&sector=&seriesid=R&frd=null&tod=null\";\r\n                    fetch(apiDataLink)\r\n                    .then(response => response.json())\r\n                    .then(response => JSON.parse(response.substr(response.indexOf(\"#@#\") + 3)))\r\n                    .then(response => {\r\n                        let latestData = eachResponse[\"Curvalue\"];\r\n                        let colDefs = [];\r\n                        let dataObject = {};\r\n        \r\n                        eachIndex = eachResponse[\"ScripFlagCode\"];\r\n                        dataObject[\"indexId\"] = eachIndex;\r\n                        dataObject[\"index\"] = eachResponse[\"IndexName\"];\r\n                        dataObject[\"latestValue\"] = latestData;\r\n        \r\n                        colDefs.push({ field: 'indexId', sortable : true});\r\n                        colDefs.push({ field: 'index', sortable : true, filter: \"agTextColumnFilter\", resizable: true});\r\n                        colDefs.push({ field: 'latestValue', sortable : true });\r\n                        \r\n                        if(response.length > 0) {\r\n                            this.state.durations.forEach(eachDuration => {\r\n                                var oldData = parseFloat(this.getOldData(response, eachDuration));\r\n                                var oldDataChange = parseFloat(latestData - oldData).toFixed(2);\r\n                                var oldDataChangePer = parseFloat((oldDataChange) * 100 / oldData).toFixed(2);\r\n            \r\n                                colDefs.push({ field: eachDuration, sortable : true, cellStyle: this.getCellStyle });\r\n                                colDefs.push({ field: eachDuration + 'Chg', sortable : true, cellStyle: this.getCellStyle });\r\n                                colDefs.push({ field: eachDuration + 'Chg%', sortable : true, cellStyle: this.getCellStyle });\r\n            \r\n                                dataObject[eachDuration] = oldData;\r\n                                dataObject[eachDuration + \"Chg\"] = parseFloat(oldDataChange);\r\n                                dataObject[eachDuration + \"Chg%\"] = parseFloat(oldDataChangePer);\r\n                            })\r\n                        }\r\n                        \r\n                        allIndexChangeData.push(dataObject);\r\n                        if(allIndexChangeData.length === noOfIndices) {\r\n                            this.setState({colDefs : colDefs, data: allIndexChangeData, loaded: true});\r\n                        }\r\n                    })       \r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return this.state.error ? <div>Error...!!!</div> :\r\n            !this.state.loaded ? <div>Loading...!!!</div> : \r\n                <TableGrid colDefs = {this.state.colDefs} rowData = {this.state.data}\r\n                width = {2500} getCellStyle = {this.getCellStyle}/>\r\n    }\r\n}\r\n \r\nexport default BSEIndices;","import React, {Component} from 'react';\r\nimport TableGrid from '../grid/TableGrid';\r\nclass BSE_ETFs extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            indexCodes : [\r\n                590095, 590096, 590106, 590103, 590098, 533230, 590104, 590108, 541097, 538057, \r\n                590101, 533385, 590097, 537007, 535276, 533244, 540787, 533570, 590113, 537708, \r\n                536960, 539517, 555555, 590099, 590107, 539313, 532985, 539487, 533719, 533408, \r\n                537008, 539312, 537483, 590110, 590115, 590109\r\n            ],\r\n            durations: ['1D', '7D', '15D', '1M', '3M', '6M', '9M', '1Y'],\r\n            colDefs: null,\r\n            data : null, \r\n            loaded : false\r\n        }\r\n    }\r\n\r\n    getOldData = (data, interval) => {\r\n        var today = new Date();\r\n        today.setHours(0, 0, 0, 0);\r\n        switch(interval) {\r\n            case '1D' : today.setDate(today.getDate() - 1);\r\n                        break;\r\n            case '7D' : today.setDate(today.getDate() - 7);\r\n                        break;\r\n            case '15D' : today.setDate(today.getDate() - 15);\r\n                        break;\r\n            case '1M' : today.setMonth(today.getMonth() - 1);\r\n                        break;\r\n            case '3M' : today.setMonth(today.getMonth() - 3);\r\n                        break;\r\n            case '6M' : today.setMonth(today.getMonth() - 6);\r\n                        break;\r\n            case '9M' : today.setMonth(today.getMonth() - 9);\r\n                        break;\r\n            case '1Y' : today.setFullYear(today.getFullYear() - 1);\r\n                        break;\r\n            default   : break;\r\n        }\r\n\r\n        let neededData = this.getDataForDate(today, data, interval);\r\n        if(neededData && neededData.length > 0) {\r\n            return neededData[0][\"vale1\"];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    getDataForDate = (dateValue, data, interval) => {\r\n        let requiredData = data.filter(eachData => dateValue.toString().includes(eachData[\"dttm\"]));\r\n        if(!requiredData || requiredData.length === 0) {\r\n            if(interval === '1D')\r\n            {\r\n                dateValue.setDate(dateValue.getDate() - 1);\r\n            }\r\n            else \r\n            {\r\n                dateValue.setDate(dateValue.getDate() + 1);\r\n            }\r\n            requiredData = this.getDataForDate(dateValue, data, interval);\r\n        }\r\n        return requiredData;\r\n    }\r\n    \r\n    getCellStyle = params => {\r\n        var data = params[\"data\"];\r\n        var col = params[\"colDef\"][\"field\"].substring(0, 2);\r\n        return {color: data[\"latestValue\"] >= data[col] ? \"green\" : \"red\"};\r\n    };\r\n\r\n    componentDidMount() {\r\n        let allIndexChangeData = [];\r\n        this.state.indexCodes.forEach(eachIndex => {\r\n            var latestDataLink = \"https://api.bseindia.com/BseIndiaAPI/api/StockReachGraph/w?scripcode=\" + eachIndex + \"&flag=0&fromdate=&todate=&seriesid=\";\r\n            fetch(latestDataLink)\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                let latestData = parseFloat(response[\"CurrVal\"]).toFixed(2);\r\n                let apiLink = \"https://api.bseindia.com/BseIndiaAPI/api/StockReachGraph/w?scripcode=\" + eachIndex + \"&flag=12M&fromdate=&todate=&seriesid=\";\r\n                fetch(apiLink)\r\n                .then(response => response.json())\r\n                .then(response => {\r\n                    let dataArray = JSON.parse(response[\"Data\"]);\r\n                    let colDefs = [];\r\n                    let dataObject = {};\r\n    \r\n                    dataObject[\"fundId\"] = eachIndex;\r\n                    dataObject[\"fund\"] = response[\"Scripname\"];\r\n                    dataObject[\"latestValue\"] = latestData;\r\n    \r\n                    colDefs.push({ field: 'fundId', sortable : true});\r\n                    colDefs.push({ field: 'fund', sortable : true, filter: \"agTextColumnFilter\", resizable: true});\r\n                    colDefs.push({ field: 'latestValue', sortable : true });\r\n    \r\n                    this.state.durations.forEach(eachDuration => {\r\n                        let oldData = parseFloat(this.getOldData(dataArray, eachDuration));\r\n                        let oldDataChange = parseFloat(latestData - oldData).toFixed(2);\r\n                        let oldDataChangePer = parseFloat((oldDataChange) * 100 / oldData).toFixed(2);\r\n    \r\n                        colDefs.push({ field: eachDuration, sortable : true, cellStyle: this.getCellStyle });\r\n                        colDefs.push({ field: eachDuration + 'Chg', sortable : true, cellStyle: this.getCellStyle });\r\n                        colDefs.push({ field: eachDuration + 'Chg%', sortable : true, cellStyle: this.getCellStyle });\r\n    \r\n                        dataObject[eachDuration] = oldData;\r\n                        dataObject[eachDuration + \"Chg\"] = parseFloat(oldDataChange);\r\n                        dataObject[eachDuration + \"Chg%\"] = parseFloat(oldDataChangePer);\r\n                    })\r\n                    \r\n                    allIndexChangeData.push(dataObject);\r\n                    if(allIndexChangeData.length === this.state.indexCodes.length) {\r\n                        this.setState({colDefs : colDefs, data: allIndexChangeData, loaded: true});\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    console.log(err)\r\n                    this.setState({data: null, error: true});\r\n                });   \r\n            });\r\n        })\r\n    }\r\n    render() {\r\n        return this.state.error ? <div>Error...!!!</div> :\r\n            !this.state.loaded ? <div>Loading...!!!</div> : \r\n                <TableGrid colDefs = {this.state.colDefs} rowData = {this.state.data}\r\n                width = {2500} getCellStyle = {this.getCellStyle}/>\r\n    }\r\n}\r\n \r\nexport default BSE_ETFs;","import { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\r\nimport 'react-tabs/style/react-tabs.css';\r\n\r\nimport BSEStocks from './bse_stocks/BSEStocks';\r\nimport MFTabs from './sbimf/MFTabs';\r\nimport BSEIndices from './bse/BSEIndices';\r\nimport BSE_ETFs from './bse_etfs/BSE_ETFs';\r\n\r\nconst TabsList = () => (\r\n  <Tabs>\r\n    <TabList>\r\n      <Tab><nobr>BSE Indices</nobr></Tab>\r\n      <Tab><nobr>BSE Stocks</nobr></Tab>\r\n      <Tab><nobr>BSE ETFs</nobr></Tab>\r\n      <Tab><nobr>Mutual Fund Stats</nobr></Tab>\r\n    </TabList>\r\n\r\n    <TabPanel>\r\n        <BSEIndices/>\r\n    </TabPanel>\r\n    <TabPanel>\r\n        <BSEStocks/>\r\n    </TabPanel>\r\n    <TabPanel>\r\n        <BSE_ETFs/>\r\n    </TabPanel>\r\n    <TabPanel>\r\n        <MFTabs/>\r\n    </TabPanel>\r\n  </Tabs>\r\n);\r\n\r\nexport default TabsList;","import './App.css';\r\nimport TabsList from './components/TabsList';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <TabsList/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}